<!DOCTYPE html>
{# 获取当前语言 #}
{% set currentLang = "en" %}
{% for lang in ["zh", "ja", "ko", "fil", "vi", "id", "ms", "th", "ru", "uk", "de", "pt"] %}
  {% if page.url.startsWith("/" + lang + "/") %}
    {% set currentLang = lang %}
  {% endif %}
{% endfor %}

{# 获取当前页面的i18n数据 #}
{% if i18n[currentLang] %}
  {% set translations = i18n[currentLang] %}
{% else %}
  {% set translations = i18n["en"] %}
{% endif %}

{% set currentPage = page.url | replace("/" + currentLang + "/", "/") | replace("/blog/", "") | replace("/", "") %}
{% if currentPage %}
  {% set currentPage = currentPage %}
{% else %}
  {% set currentPage = "index" %}
{% endif %}

<html lang="{{ translations.meta.lang }}" dir="{{ translations.meta.dir }}">
<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
  
  <title>{{ translations.pages[currentPage].title }}</title>
  <meta name="description" content="{{ translations.pages[currentPage].description }}">
  
  {# OpenGraph和Twitter卡片标签 #}
  <meta property="og:title" content="{{ translations.pages[currentPage].title }}" />
  <meta property="og:description" content="{{ translations.pages[currentPage].description }}" />
  <meta property="og:url" content="https://insidetimer.com{{ page.url }}" />
  <meta property="og:site_name" content="insidetimer.com" />
  <meta property="og:image" content="https://insidetimer.com/assets/insidetimer.jpeg" />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="{{ translations.pages[currentPage].title }}" />
  <meta name="twitter:description" content="{{ translations.pages[currentPage].description }}" />
  <meta name="twitter:image" content="https://insidetimer.com/assets/insidetimer.jpeg" />
  <link rel="canonical" href="https://insidetimer.com{{ page.url }}" />
  
  {# 添加语言替代链接 #}
  {# {% for lang in ["en", "zh", "ja", "ko", "fil", "vi", "id", "ms", "th", "ru", "uk", "de", "pt"] %} #}
  {# {% for lang in ["en", "zh"] %}
    {% if lang == "en" %}
      {% set langPath = "" %}
    {% else %}
      {% set langPath = "/" + lang %}
    {% endif %}
    <link rel="alternate" hreflang="{{ lang }}" href="https://insidetimer.com{{ langPath }}{{ page.url | replace("/" + currentLang + "/", "/") }}" />
  {% endfor %} #}
  
  <meta name="google-adsense-account" content="ca-pub-5331303144323541">
 
  <link id="favicon" rel="icon" href="/assets/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="/css/normalize.min.css">
  <link rel="stylesheet" href="/css/fonts.css">
  <!-- <link rel="stylesheet" type="text/css" href="./toastify.min.css"> -->
  <!-- <script type="text/javascript" src="./toastify-js.js"></script> -->
  <script src="/js/tailwindcss.js"></script>
  <script src="/js/timer.js?v=202412181810""></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            dark: '#454545',
            yellow: '#f7f8f1',
            light: '#81966d'
          },
          fontFamily: {
            'opsb': ['OptimusPrincepsSemiBold', 'Cinzel', 'Verdana', 'Arial', 'Helvetica', 'sans-serif'],
            'cinzel': ['Cinzel', 'serif'],
          }
        }
      }
    }

  </script>
</head>
<body class="w-full text-yellow font-sans bg-fixed">
  <button id="menu-toggle" class="fixed top-4 right-4 z-50 bg-dark bg-opacity-50 rounded-full p-2 hover:scale-110 transition-all">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 menu-icon hover:animate-spin">
      <path fill-rule="evenodd" d="M11.828 2.25c-.916 0-1.699.663-1.85 1.567l-.091.549a.798.798 0 0 1-.517.608 7.45 7.45 0 0 0-.478.198.798.798 0 0 1-.796-.064l-.453-.324a1.875 1.875 0 0 0-2.416.2l-.243.243a1.875 1.875 0 0 0-.2 2.416l.324.453a.798.798 0 0 1 .064.796 7.448 7.448 0 0 0-.198.478.798.798 0 0 1-.608.517l-.55.092a1.875 1.875 0 0 0-1.566 1.849v.344c0 .916.663 1.699 1.567 1.85l.549.091c.281.047.508.25.608.517.06.162.127.321.198.478a.798.798 0 0 1-.064.796l-.324.453a1.875 1.875 0 0 0 .2 2.416l.243.243c.648.648 1.67.733 2.416.2l.453-.324a.798.798 0 0 1 .796-.064c.157.071.316.137.478.198.267.1.47.327.517.608l.092.55c.15.903.932 1.566 1.849 1.566h.344c.916 0 1.699-.663 1.85-1.567l.091-.549a.798.798 0 0 1 .517-.608 7.52 7.52 0 0 0 .478-.198.798.798 0 0 1 .796.064l.453.324a1.875 1.875 0 0 0 2.416-.2l.243-.243c.648-.648.733-1.67.2-2.416l-.324-.453a.798.798 0 0 1-.064-.796c.071-.157.137-.316.198-.478.1-.267.327-.47.608-.517l.55-.091a1.875 1.875 0 0 0 1.566-1.85v-.344c0-.916-.663-1.699-1.567-1.85l-.549-.091a.798.798 0 0 1-.608-.517 7.507 7.507 0 0 0-.198-.478.798.798 0 0 1 .064-.796l.324-.453a1.875 1.875 0 0 0-.2-2.416l-.243-.243a1.875 1.875 0 0 0-2.416-.2l-.453.324a.798.798 0 0 1-.796.064 7.462 7.462 0 0 0-.478-.198.798.798 0 0 1-.517-.608l-.091-.55a1.875 1.875 0 0 0-1.85-1.566h-.344ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z" clip-rule="evenodd" />
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 close-icon hidden">
      <path fill-rule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm-1.72 6.97a.75.75 0 1 0-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 1 0 1.06 1.06L12 13.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L13.06 12l1.72-1.72a.75.75 0 1 0-1.06-1.06L12 10.94l-1.72-1.72Z" clip-rule="evenodd" />
    </svg>

  </button>

  <div id="overlay" class="fixed inset-0 bg-black backdrop-blur-sm bg-opacity-50 z-30 hidden"></div>
  <div id="drawer" class="fixed top-0 right-0 h-full w-full md:w-96 shadow-2xl shadow-[#91b5bf] bg-yellow bg-opacity-80 backdrop-blur-lg transform translate-x-full transition-transform duration-300 ease-in-out z-40 overflow-y-auto">
    <div class="p-8 text-dark">
      <!-- Add drawer content here -->
      <h1 class="text-3xl font-bold mb-2 text-dark">Inside Timer</h1>
      <p class="text-sm opacity-80 mb-4">Inside Timer is a free online timer for meditation, focus, sleep, reflection and more. A timer that allows you to interact with your inner self. Have a peaceful time!</p>
      {# ko-fi #}
      <div>
        <script type='text/javascript' src='https://storage.ko-fi.com/cdn/widget/Widget_2.js'></script>
        <script type='text/javascript'>kofiwidget2.init('Buy me a coffee', '#72a4f2', 'G2G2Y61IB');kofiwidget2.draw();</script> 
      </div>
      {# ko-fi #}

      <div class="mt-8 flex items-center justify-between mb-2">
          <h2 class="text-lg font-bold">Volume</h2>
          <span class="text-[#72a4f2] font-black" id="volumeValue">50%</span>
      </div>
      <input type="range" min="0" max="100" value="50" step="1"
      class="volumeslider w-full h-2 bg-[#72a4f2] bg-opacity-50 rounded-lg appearance-none cursor-pointer"
      id="volume"
      />

      {# presets #}
      <h2 class="mt-8 text-lg font-bold mb-2">Presets</h2>
      <p class="mb-4 text-xs opacity-80">Note: Presets are saved in your browser's local storage. If you clear your local storage or use a different browser/device, your presets will be lost. The maximum presets you can save is 10.</p>
      <ul id="presetList" class="space-y-2 text-xs">
        <!-- Presets will be dynamically added here -->
      </ul>

      <h2 class="mt-8 text-lg font-bold mb-2">About</h2>
      <p class="text-sm mb-2 opacity-80">I'm passionate about yoga and meditation, and I've noticed that many timers out there are overly fancy and complicated. As a minimalist, I prefer simplicity and clarity in everything. That’s why I created this timer — bringing all the essential features to a single page. This way, you can start timing with the least hassle and the quickest setup.</p>
      <p class="text-sm mb-2 opacity-80">If you enjoy it, feel free to <button class="underline text-[#ff5a16]" onclick="copyPageUrl()">share inside timer</button> with your friends or <a href="https://ko-fi.com/adajiang666" target="_blank" class="underline text-[#ff5a16]">buy me a coffee</a> to support my work. Thanks so much!</p>
      <p class="text-sm mb-2 opacity-80">I welcome any feedback or suggestions you may have. You can reach me at <a href="mailto:insidetimeronline@gmail.com" class="underline text-[#ff5a16]">insidetimeronline@gmail.com</a> </p>
    </div>
  </div>

  
  {{ content | safe }}

  {# <section class="bg-green bg-gradient-to-l from-green via-red to-green" id="cta">
    <div class="text-center p-8 rounded-lg text-yellow">
        <h2 class="text-2xl font-bold mb-2 font-opsb text-light">{{ translations.cta.title }}</h2>
        <p class="mb-6 opacity-75 font-opsb text-light bg-clip-text text-transparent bg-gradient-to-r from-light to-yellow">{{ translations.cta.description }}</p>
        <div class="flex flex-wrap justify-center gap-4 mt-6">
          {% for platform in translations.cta.platforms %}
          <a href="{{ platform.link }}" target="_blank" class="shadow-lg shadow-red py-3 px-6 bg-gradient-to-br from-green to-green via-red animate-gradient-x rounded-full font-black hover:scale-110 transition duration-300 font-opsb text-light">
            {{ platform.title }} →
          </a>
          {% endfor %}
        </div>

    </div>
  </section> #}
  {# <footer class="bg-green bg-opacity-80 py-5 flex flex-col justify-center items-center text-center">
    <p class="text-xs mt-10">
      &copy;
      <span id="copyright"></span>
      insidetimer.com
      <span id="copyright-year">{{ translations.footer.copyright }}</span>
      
      <a href="{{ '/privacy' | localizeUrl(currentLang) }}" class="text-light">
        {{ translations.footer.privacyPolicy }}
      </a>
      <a href="{{ translations.footer.gitlink }}" target="_blank" class="ml-4 text-light">
        {{ translations.footer.github }}
      </a>   

    </p>
  </footer> #}

  <script>
    function adjustMainContainerHeight() {
        const mainContainer = document.getElementById('mainContainer');
        const viewportHeight = window.innerHeight;
        mainContainer.style.height = `${viewportHeight}px`;
    }


    document.addEventListener('DOMContentLoaded', () => {
      adjustMainContainerHeight();
      loadPresets();

      // set volume
      const volumeSlider = document.getElementById('volume');
      const volumeValue = document.getElementById('volumeValue');
      const menuToggle = document.getElementById('menu-toggle');

      // 从本地存储读取音量值
      function loadVolume() {
          const savedVolume = localStorage.getItem('inside-timer-bell-volume');
          if (savedVolume !== null) {
              volumeSlider.value = savedVolume;
              volumeValue.textContent = `${savedVolume}%`;
          } else {
              // 如果没有保存的值，设置默认值为50
              volumeSlider.value = 50;
              volumeValue.textContent = '50%';
              localStorage.setItem('inside-timer-bell-volume', 50);
          }
      }

      // 保存音量值到本地存储
      function saveVolume(value) {
          localStorage.setItem('inside-timer-bell-volume', value);

          Object.keys(currentInstance.audioFiles).forEach(bellAudio => {
            currentInstance.audioFiles[bellAudio].volume = value / 100;
        });
      }

      // 监听滑块变化
      volumeSlider.addEventListener('input', function() {
          const value = this.value;
          volumeValue.textContent = `${value}%`;
          saveVolume(value);
      });

      // 页面加载时读取保存的音量值
      window.addEventListener('load', loadVolume);

      window.addEventListener('resize', adjustMainContainerHeight);

      // drawer toggle
      menuToggle.addEventListener('click', function() {
        toggleDrawer();
      });

    });

    function loadPresets() {
      const presetList = document.getElementById('presetList');
      const presets = JSON.parse(localStorage.getItem('timerPresets')) || [];
      presetList.innerHTML = '';
      if(presets.length === 0) {
        presetList.innerHTML = '<p class="text-dark">No presets found.</p>';
        return;
      }
      presets.forEach((preset, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
          <div class="flex items-center gap-2 text-xs">
            <button class="delete-preset p-1 bg-dark hover:bg-red-600 text-white rounded-full">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-3">
                <path fill-rule="evenodd" d="M16.5 4.478v.227a48.816 48.816 0 0 1 3.878.512.75.75 0 1 1-.256 1.478l-.209-.035-1.005 13.07a3 3 0 0 1-2.991 2.77H8.084a3 3 0 0 1-2.991-2.77L4.087 6.66l-.209.035a.75.75 0 0 1-.256-1.478A48.567 48.567 0 0 1 7.5 4.705v-.227c0-1.564 1.213-2.9 2.816-2.951a52.662 52.662 0 0 1 3.369 0c1.603.051 2.815 1.387 2.815 2.951Zm-6.136-1.452a51.196 51.196 0 0 1 3.273 0C14.39 3.05 15 3.684 15 4.478v.113a49.488 49.488 0 0 0-6 0v-.113c0-.794.609-1.428 1.364-1.452Zm-.355 5.945a.75.75 0 1 0-1.5.058l.347 9a.75.75 0 1 0 1.499-.058l-.346-9Zm5.48.058a.75.75 0 1 0-1.498-.058l-.347 9a.75.75 0 0 0 1.5.058l.345-9Z" clip-rule="evenodd" />
              </svg>
            </button>
            <button class="load-preset flex-grow flex items-center justify-between px-3 py-1 bg-white bg-opacity-20 hover:bg-[#72a4f2] rounded-full text-dark transition-colors">
              <span>${preset.name}</span>
              <span class="flex items-center gap-2">
                <span>${formatTime(preset.durationTime)}</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </span>
            </button>
          </div>
        `;
        li.querySelector('.load-preset').addEventListener('click', () => loadPreset(preset));
        li.querySelector('.delete-preset').addEventListener('click', () => deletePreset(index));
        presetList.appendChild(li);
      });
    }

    function deletePreset(index) {
      const presets = JSON.parse(localStorage.getItem('timerPresets')) || [];
      presets.splice(index, 1);
      localStorage.setItem('timerPresets', JSON.stringify(presets));
      loadPresets();
    }

    function loadPreset(preset) {
      toggleDrawer();
      new Timer(preset);
    }


    function addNewPreset(preset) {
      toggleDrawer();

      const li = document.createElement('li');
      li.innerHTML = `
      <div class="flex items-center justify-between gap-2 text-xs">
        <input type="text" placeholder="Enter preset name" class="w-full px-3 py-2 bg-dark bg-opacity-20 rounded-full text-dark outline-none">
        <button class="px-3 py-2 bg-[#72a4f2] text-yellow rounded-full hover:bg-opacity-80">Save</button>
      </div>
      `;
      li.querySelector('button').addEventListener('click', (e) => saveNewPreset(e, preset));
      presetList.insertBefore(li, presetList.firstChild);
    };

    function saveNewPreset(event, preset) {
      const li = event.target.closest('li');
      const input = li.querySelector('input');
      const name = input.value.trim();
      if (name) {
        const presetSetting = {
          name,
          warmUpTime: preset.warmUpTime,
          durationTime: preset.durationTime,
          intervalTime: preset.intervalTime,
          startSound: preset.startSound,
          intervalSound: preset.intervalSound,
          currentColor: preset.currentColor
        };
        let presets = JSON.parse(localStorage.getItem('timerPresets')) || [];
        presets.unshift(presetSetting);
        if (presets.length > 10) {
          presets = presets.slice(0, 10);
        }
        localStorage.setItem('timerPresets', JSON.stringify(presets));
        loadPresets();
      }
    }
    
    function toggleDrawer() {
      const drawer = document.getElementById('drawer');
      const menuIcon = document.querySelector('.menu-icon');
      const closeIcon = document.querySelector('.close-icon');
      const overlay = document.getElementById('overlay');
      
      drawer.classList.toggle('translate-x-full');
      overlay.classList.toggle('hidden');
      menuIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');

      if (drawer.classList.contains('translate-x-full')) {
          const unsavedPreset = presetList.querySelector('input[type="text"]');
          if (unsavedPreset) {
              unsavedPreset.closest('li').remove();
          }
      }

      document.getElementById('overlay').addEventListener('click', toggleDrawer);
    };

    function formatTime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = seconds % 60;
        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
    }
    // copy link
    function copyPageUrl() {
      navigator.clipboard.writeText(window.location.href).then(() => {
        const toast = document.createElement('div');
        toast.textContent = 'Link copied!';
        toast.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.9);
            color: #000;
            padding: 8px 16px;
            border-radius: 4px;
            z-index: 100;
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    }
  </script>
  <!-- For Analysis -->
  <script defer data-domain="insidetimer.com" src="https://app.pageview.app/js/script.js"></script>

  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-EF8TC9S0ZV"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-EF8TC9S0ZV');
  </script>


</body>
</html>